# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: sentiment.proto
# Protobuf Python Version: 5.29.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder

_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    5,
    29,
    0,
    '',
    'sentiment.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()

DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\x0fsentiment.proto\x12\tsentiment\"7\n\x10SentimentRequest\x12\x12\n\ncomment_id\x18\x01 \x01(\t\x12\x0f\n\x07\x63ontent\x18\x02 \x01(\t\":\n\x11SentimentResponse\x12\x12\n\ncomment_id\x18\x01 \x01(\t\x12\x11\n\tsentiment\x18\x02 \x01(\t2Y\n\x11SentimentAnalysis\x12\x44\n\x07\x41nalyze\x12\x1b.sentiment.SentimentRequest\x1a\x1c.sentiment.SentimentResponseb\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'sentiment_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
    DESCRIPTOR._loaded_options = None
    _globals['_SENTIMENTREQUEST']._serialized_start = 30
    _globals['_SENTIMENTREQUEST']._serialized_end = 85
    _globals['_SENTIMENTRESPONSE']._serialized_start = 87
    _globals['_SENTIMENTRESPONSE']._serialized_end = 145
    _globals['_SENTIMENTANALYSIS']._serialized_start = 147
    _globals['_SENTIMENTANALYSIS']._serialized_end = 236
# @@protoc_insertion_point(module_scope)

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: sentiment.proto
# plugin: python-betterproto
from dataclasses import dataclass

import betterproto
import grpclib


@dataclass
class SentimentRequest(betterproto.Message):
    comment_id: str = betterproto.string_field(1)
    content: str = betterproto.string_field(2)


@dataclass
class SentimentResponse(betterproto.Message):
    comment_id: str = betterproto.string_field(1)
    sentiment: str = betterproto.string_field(2)


class SentimentAnalysisStub(betterproto.ServiceStub):
    async def analyze(
            self, *, comment_id: str = "", content: str = ""
    ) -> SentimentResponse:
        request = SentimentRequest()
        request.comment_id = comment_id
        request.content = content

        return await self._unary_unary(
            "/sentiment.SentimentAnalysis/Analyze",
            request,
            SentimentResponse,
        )
